plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.6'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'checkstyle'
    id 'org.ec4j.editorconfig' version '0.0.3'
    id("com.google.osdetector") version "1.7.1"
}

group = 'com.ex'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    //mysql 8.1부터는 group은 com.mysql artifact는 mysql-connector-j로 변경
    implementation group: 'com.mysql', name: 'mysql-connector-j', version: '8.2.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.1.0'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.566'
    implementation group: 'org.apache.tika', name: 'tika-core', version: '2.9.0'
    implementation ('com.github.javafaker:javafaker:1.0.2') { exclude module: 'org.yaml' }
    //spring boot 3.2부터 version 2.2로 업데이트 2.7.x부터 3.2전까지는 1.33버전 호환
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.33'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
    // WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    //jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
    // Querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    if (osdetector.classifier == "osx-aarch_64") { // MacOS 일 때 이슈 해결용 의존성 추가
        runtimeOnly("io.netty:netty-resolver-dns-native-macos:4.1.77.Final:${osdetector.classifier}")
    }
}

def querydslDir = "src/main/generated"

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}


tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}

tasks.named('test') {
    file(".env").eachLine {
        String[] tokens = it.split("=")
        if (tokens.length > 1) {
            String key = tokens[0]
            String value = tokens[1]
            environment(key, value)
        }
    }
    useJUnitPlatform()
}

checkstyle {
    toolVersion = '10.12.3'
    maxWarnings 0
    ignoreFailures false
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/main/test'
}

tasks.withType(Checkstyle).configureEach {
    reports {
    }
}
tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

